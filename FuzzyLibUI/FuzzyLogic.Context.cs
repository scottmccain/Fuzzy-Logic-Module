//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FuzzyLibUI
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class FuzzyLogicEntities : DbContext
    {
        public FuzzyLogicEntities()
            : base("name=FuzzyLogicEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<FuzzyModule> FuzzyModules { get; set; }
        public DbSet<FuzzyRule> FuzzyRules { get; set; }
        public DbSet<FuzzyShape> FuzzyShapes { get; set; }
        public DbSet<FuzzyTerm> FuzzyTerms { get; set; }
        public DbSet<FuzzyTermParameter> FuzzyTermParameters { get; set; }
        public DbSet<FuzzyVariable> FuzzyVariables { get; set; }
    
        public virtual int uspAddFuzzyModule(string name, string type)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddFuzzyModule", nameParameter, typeParameter);
        }
    
        public virtual int uspAddFuzzyRule(string text, Nullable<int> moduleId)
        {
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddFuzzyRule", textParameter, moduleIdParameter);
        }
    
        public virtual int uspAddFuzzyShape(string name, string type)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddFuzzyShape", nameParameter, typeParameter);
        }
    
        public virtual int uspAddFuzzyTerm(string name, Nullable<int> shapeId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var shapeIdParameter = shapeId.HasValue ?
                new ObjectParameter("ShapeId", shapeId) :
                new ObjectParameter("ShapeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddFuzzyTerm", nameParameter, shapeIdParameter);
        }
    
        public virtual int uspAddFuzzyTermParameter(string name, string value, Nullable<int> termId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("TermId", termId) :
                new ObjectParameter("TermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddFuzzyTermParameter", nameParameter, valueParameter, termIdParameter);
        }
    
        public virtual int uspAddFuzzyVariable(string name, Nullable<int> moduleId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddFuzzyVariable", nameParameter, moduleIdParameter);
        }
    }
}
